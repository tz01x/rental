{"version":3,"sources":["App_2.js","search_bar.js","components/SimpleSelect.js","components/RangeSlider.js","serviceWorker.js","components/MultipleSelect.js"],"names":["theme","createMuiTheme","palette","primary","main","App_2","api_server_url","window","location","host","protocol","useState","city","property_type","price","fdata","setFdata","allcitys","setAllcitys","allpTypes","setAllpTypes","handelChangeFdata","event","console","log","target","name","value","useEffect","a","fetch","responce","json","forEach","element","push","val","inlineTxt","responce2","id","href","fetchdata","className","ThemeProvider","SimpleSelect","key","label","curr_value","op","RangeSlider","rname","rval","Button","variant","color","xmlns","width","height","fill","viewBox","d","ReactDOM","render","document","getElementById","serviceWorker","useStyles","makeStyles","formControl","margin","spacing","minWidth","outlineColor","boxShadow","selectEmpty","marginTop","filled","backgroundColor","props","classes","style","fontSize","labelId","onChange","map","v","idx","root","maxWidth","borderTopRightRadius","borderTopLeftRadius","input","rlables","paddingLeft","paddingTop","React","values","setValue","handleInputChange","inputname","tempnum","test","Number","toString","display","justifyContent","position","left","top","container","alignItems","item","e","Boolean","hostname","match","unregister","navigator","ready","then","registration","colorPrimary","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","MultipleSelect","multiple","selectedFeature","renderValue","selected","join","data","checked","indexOf"],"mappings":"kSASMA,G,MAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAK,eA8GIC,MA1Gf,WACE,IAAMC,EAAuC,kBAAtBC,OAAOC,SAASC,KAAuB,yBAA0BF,OAAOC,SAASE,SAAS,KAAKH,OAAOC,SAASC,KAAK,IAD5H,EAGQE,mBAAS,CAC9BC,KAAK,GACLC,cAAc,GACdC,MAAM,CAAC,IAAK,OANC,mBAGRC,EAHQ,KAGFC,EAHE,OAecL,mBAAS,IAfvB,mBAeRM,EAfQ,KAeCC,EAfD,OAgBgBP,mBAAS,IAhBzB,mBAgBRQ,EAhBQ,KAgBEC,EAhBF,KAoDf,SAASC,EAAkBC,GAEzBC,QAAQC,IAAIF,EAAMG,OAAOC,MACzBV,EAAS,2BAAID,GAAL,kBAAYO,EAAMG,OAAOC,KAAMJ,EAAMG,OAAOE,SAEtD,OAtCAC,qBAAU,WAAI,4CAGZ,8BAAAC,EAAA,sEACuBC,MAAMxB,EAAe,aAD5C,cACQyB,EADR,gBAEmBA,EAASC,OAF5B,qBAIOC,SAAQ,SAAAC,GAIXjB,EAASkB,KAAK,CAACC,IAAIF,EAAQR,KAAKW,UAAUH,EAAQR,OAElDR,EAAY,YAAID,OAVpB,SAawBa,MAAMxB,EAAe,4BAb7C,cAaQgC,EAbR,iBAcoBA,EAAUN,OAd9B,eAgBQC,SAAQ,SAAAC,GAIZf,EAAUgB,KAAK,CAACC,IAAIF,EAAQK,GAAGF,UAAUH,EAAQR,OAEjDN,EAAa,YAAID,OAtBrB,6CAHY,sBAEZI,QAAQC,IAAKjB,OAAOC,SAASgC,MAFjB,mCA6BZC,KACA,IASA,6BACE,yBAAKC,UAAU,cAGf,yBAAMA,UAAU,WAChB,kBAACC,EAAA,EAAD,CAAe3C,MAAOA,GACtB,kBAAC4C,EAAA,EAAD,CAAcC,IAAK,WAAYnB,KAAK,OAAOoB,MAAM,QAAQzB,kBAAmBA,EAAmB0B,WAAYhC,EAAMH,KAAMoC,GAAI/B,IAC3H,kBAAC2B,EAAA,EAAD,CAAcC,IAAK,aAAcnB,KAAK,gBAAgBoB,MAAM,gBAAgBzB,kBAAmBA,EAAmB0B,WAAYhC,EAAMF,cAAemC,GAAI7B,IAEvJ,kBAAC8B,EAAA,EAAD,CAAaC,MAAM,QAAQC,KAAMpC,EAAMD,MAAOO,kBAAmBA,MAsBjE,kBAAC+B,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,aAClC,yBAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAehB,UAAU,eAAeiB,QAAQ,aACpH,0BAAMC,EAAE,mM,QCrGdC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SAKnDC,O,gCCXA,8FAQMC,EAAYC,aAAW,SAACnE,GAAD,MAAY,CACvCoE,YAAa,CACXC,OAAQrE,EAAMsE,QAAQ,GACtBC,SAAU,QAEVC,aAAa,YACbC,UAAU,qBAIZC,YAAa,CACXC,UAAW3E,EAAMsE,QAAQ,IAE3BM,OAAO,CACLC,gBAAgB,YAChB,gBAAgB,CACdA,gBAAgB,cAKP,SAASjC,EAAakC,GACnC,IAAMC,EAAUb,IAMhB,OAHFtC,qBAAU,WACRL,QAAQC,IAAIsD,KACZ,IAGI,kBAAC,IAAD,CAAazB,QAAQ,SAAUX,UAAWqC,EAAQX,aAChD,kBAAC,IAAD,CAAY7B,GAAG,2BAA2ByC,MAAO,CAACC,SAAS,WAAYH,EAAMhC,OAC7E,kBAAC,IAAD,CAEEoC,QAAQ,2BACR3C,GAAG,qBACHZ,MAAOmD,EAAM/B,WACboC,SAAUL,EAAMzD,kBAChBK,KAAMoD,EAAMpD,KACZoB,MAAOgC,EAAMhC,MACbJ,UAAWqC,EAAQH,QAGnB,kBAAC,IAAD,CAAUjD,MAAM,IACd,qCAEDmD,EAAM9B,GAAG8B,EAAM9B,GAAGoC,KAAI,SAACC,EAAEC,GACxB,OAAO,kBAAC,IAAD,CAAUzC,IAAKwC,EAAEjD,IAAKT,MAAO0D,EAAEjD,KAAMiD,EAAEhD,cAC7C,S,sIC9CP6B,EAAYC,aAAW,SAACnE,GAAD,MAAY,CACrCuF,KAAM,CACFhB,SAAU,QACViB,SAAU,QAEVnB,OAAQrE,EAAMsE,QAAQ,GACtBmB,qBAAqB,EACrBC,oBAAoB,EAOpBb,gBAAgB,YAChBJ,UAAU,qBAOdJ,OAAQ,CACJZ,OAAQzD,EAAMsE,QAAQ,IAE1BqB,MAAO,CACHnC,MAAO,GACPC,OAAQ,UAEZmC,QAAS,CAELX,SAAU,SACVY,YAAa,KACbC,WAAY,OACZxC,MAAM,eAsBC,SAASL,EAAY6B,GAEhC,IAAMC,EAAUb,IAFuB,EAGZ6B,IAAMpF,SAAS,CAAC,OAAQ,WAHZ,mBAGhCqF,EAHgC,KAGxBC,EAHwB,KAWjCC,EAAoB,SAAC5E,EAAM6E,GAG7B,IAAIC,EAAQ,EACZ,IACI,IAAK,QAAQC,KAAK/E,EAAMG,OAAOE,OAE3B,OAGJyE,EAAUE,OAAOhF,EAAMG,OAAOE,OAE7B,SACG,OAIJyE,EAAU,GAKVA,EAAU,MAME,UAAZD,GAEAF,EAAS,CAACD,EAAO,GAAII,EAAQG,aAE7BjF,EAAMG,OAAN,KAAuBqD,EAAM5B,MAC7B5B,EAAMG,OAAN,MAAwB,CAAC6E,OAAON,EAAO,IAAKI,GAC5CtB,EAAMzD,kBAAkBC,IAEN,UAAb6E,IACLF,EAAS,CAACG,EAAQG,WAAYP,EAAO,KACrC1E,EAAMG,OAAN,KAAuBqD,EAAM5B,MAC7B5B,EAAMG,OAAN,MAAwB,CAAC2E,EAASE,OAAON,EAAO,KAChDlB,EAAMzD,kBAAkBC,MAkBhC,OAJAM,qBAAU,eAKN,yBAAKc,UAAWqC,EAAQQ,MAEpB,kBAAC,IAAD,CAAY7C,UAAWqC,EAAQa,QAASrD,GAAG,gBAA3C,UACW,uCADX,KAeA,yBAAKyC,MAAO,CACRwB,QAAS,OAETC,eAAgB,eAGhBC,SAAU,WAEVC,KAAM,OACNC,IAAK,QAEL,kBAAC,IAAD,CAAMC,WAAS,EAACvC,QAAS,EAAGwC,WAAW,YACnC,kBAAC,IAAD,CAAMC,MAAI,GACN,uBAAG/B,MAAO,CAAEC,SAAU,KAAtB,QAEJ,kBAAC,IAAD,CAAM8B,MAAI,GACN,kBAAC,IAAD,CAEIrE,UAAWqC,EAAQY,MACnBhE,MAAOqE,EAAO,GACdtE,KAAK,SACL2C,OAAO,QACPc,SAAU,SAAC6B,GAAD,OAAKd,EAAkBc,EAAE,eAa/C,kBAAC,IAAD,CAAMH,WAAS,EAACvC,QAAS,EAAGwC,WAAW,YACnC,kBAAC,IAAD,CAAMC,MAAI,GACN,uBAAG/B,MAAO,CAAEC,SAAU,KAAtB,QAEJ,kBAAC,IAAD,CAAM8B,MAAI,GACN,kBAAC,IAAD,CAEIrE,UAAWqC,EAAQY,MACnBhE,MAAOqE,EAAO,GACdtE,KAAK,SACL2C,OAAO,QAEPc,SAAU,SAAC6B,GAAD,OAAKd,EAAkBc,EAAE,mB,gCCxM/D,kCAYoBC,QACW,cAA7B1G,OAAOC,SAAS0G,UAEe,UAA7B3G,OAAOC,SAAS0G,UAEhB3G,OAAOC,SAAS0G,SAASC,MACvB,2DAgHC,SAASC,IACV,kBAAmBC,WACrBA,UAAUpD,cAAcqD,MAAMC,MAAK,SAAAC,GACjCA,EAAaJ,kB,gCCrInB,sHAaMlD,EAAYC,aAAW,SAACnE,GAAD,MAAY,CACvCoE,YAAa,CAEXqB,qBAAqB,EACrBC,oBAAoB,EACpBrB,OAAQrE,EAAMsE,QAAQ,GACtBG,UAAU,oBAEVF,SAAU,QAEVM,gBAAgB,YAEhB,oBAAoB,CAClBR,OAAO,OAGT,kCAAkC,CAChCQ,gBAAgB,UAMpB4C,aAAa,CACXnE,MAAO,eAWX,IAEMoE,EAAY,CAChBC,WAAY,CACV3C,MAAO,CACL4C,UAAWC,IACXrE,MAAO,OAQE,SAASsE,EAAehD,GACrC,IAAMC,EAAUb,IAYhB,OACE,6BAsBE,kBAAC,IAAD,CAAaxB,UAAWqC,EAAQX,aAC9B,kBAAC,IAAD,CAAYY,MAAO,CAAC2B,KAAK,OAAO1B,SAAS,UAAW1C,GAAG,4BAA4BuC,EAAMhC,MAAMgC,EAAMhC,MAAM,MAC3G,kBAAC,IAAD,CAEEoC,QAAQ,2BACR3C,GAAG,qBACHwF,UAAQ,EACRpG,MAAOmD,EAAMkD,gBACb7C,SAvCa,SAAC7D,GACpBA,EAAMG,OAAN,KAAqBqD,EAAMpD,KAE3BoD,EAAMzD,kBAAkBC,IAqClBqE,MAAO,kBAAC,IAAD,MACPsC,YAAa,SAACC,GAAD,OAAcA,EAASC,KAAK,OACzCT,UAAWA,GAEV5C,EAAMsD,KAAKhD,KAAI,SAAC1D,GAAD,OACd,kBAAC,IAAD,CAAUmB,IAAKnB,EAAMC,MAAOD,GAC1B,kBAAC,IAAD,CAAWgB,UAAWqC,EAAQ0C,aAAcY,QAASvD,EAAMkD,gBAAgBM,QAAQ5G,IAAS,IAC5F,kBAAC,IAAD,CAAcvB,QAASuB,a","file":"static/js/search_bar.8d2d43d7.chunk.js","sourcesContent":["import './App.css';\r\nimport React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport SimpleSelect from './components/SimpleSelect';\r\nimport {createMuiTheme,ThemeProvider} from '@material-ui/core/styles';\r\nimport RangeSlider from './components/RangeSlider';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport {Button} from '@material-ui/core';\r\nimport MultipleSelect from './components/MultipleSelect.js'\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main:\"#ea4e2f\"\r\n    }\r\n  },\r\n});\r\nfunction App_2() {\r\n  const api_server_url = window.location.host==\"localhost:3000\"?\"http://127.0.0.1:8000/\":(window.location.protocol+\"//\"+window.location.host+\"/\");\r\n\r\n  const [fdata,setFdata]=useState({\r\n    city:'',\r\n    property_type:'',\r\n    price:[5000,10000],\r\n    \r\n  })\r\n  /**datatype: \r\n   * [\r\n   * {  val:option.val,\r\n   *    inlinetxt:option.inlineTxt\r\n   * }\r\n   * ]**/\r\n  const [allcitys,setAllcitys]=useState([]);\r\n  const [allpTypes,setAllpTypes]=useState([]);\r\n\r\n  \r\n  useEffect(()=>{\r\n   \r\n    console.log( window.location.href)\r\n    async function fetchdata(){\r\n      const responce=await fetch(api_server_url+\"api/city/\");\r\n      const data=await responce.json();\r\n      // console.log(data);\r\n      data.forEach(element => {\r\n        // element.name\r\n\r\n        //  console.log([...allcitys]);\r\n        allcitys.push({val:element.name,inlineTxt:element.name});\r\n       \r\n        setAllcitys([...allcitys]);\r\n      });\r\n\r\n      const responce2=await fetch(api_server_url+\"api/property/types/list/\");\r\n      const data2=await responce2.json();\r\n      // console.log(data);\r\n      data2.forEach(element => {\r\n        // element.name\r\n\r\n        //  console.log([...allcitys]);\r\n        allpTypes.push({val:element.id,inlineTxt:element.name});\r\n       \r\n        setAllpTypes([...allpTypes]);\r\n      });\r\n\r\n    }\r\n    fetchdata();\r\n  },[])\r\n  // (=(\\w+)|=(\\[\\d+,\\d+\\]))\r\n\r\n  function handelChangeFdata(event){\r\n    // event.terget.name\r\n    console.log(event.target.name);\r\n    setFdata({...fdata,[event.target.name]:event.target.value});\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"search_bar\">\r\n\r\n      \r\n      <div  className=\"ifields\">\r\n      <ThemeProvider theme={theme}>\r\n      <SimpleSelect key={\"8285333#\"} name=\"city\" label=\"Citys\" handelChangeFdata={handelChangeFdata} curr_value={fdata.city} op={allcitys} />\r\n      <SimpleSelect key={\"828987533#\"} name=\"property_type\" label=\"Property type\" handelChangeFdata={handelChangeFdata} curr_value={fdata.property_type} op={allpTypes}/>\r\n\r\n      <RangeSlider rname=\"price\" rval={fdata.price} handelChangeFdata={handelChangeFdata}/>\r\n      {/* <SimpleSelect key={\"8k8987533#\"} name=\"bedroom\" label=\"Bed rooms\" handelChangeFdata={handelChangeFdata} curr_value={fdata.bedroom} op={[0].map((i)=>{\r\n        const d=[];\r\n        for(let i=1;i<15;i++){\r\n          d.push({val:i,inlineTxt:i});\r\n        }\r\n        return d;\r\n      })[0]}/> */}\r\n     </ThemeProvider>\r\n      \r\n      \r\n      </div>\r\n      {/* <Fab  style={{background:\"white\",color:\"#ea4e2f\"}} onClick={()=>{\r\n        let args=\"?\";\r\n        for (const key in fdata) {\r\n         args=`${key}=${fdata[key]}&`;\r\n        }\r\n        window.location.assign(\"./property/list/\"+args);\r\n        }}>\r\n      \r\n      </Fab> */}\r\n\r\n      <Button variant=\"contained\" color=\"secondary\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-search\" viewBox=\"0 0 16 16\">\r\n      <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\"/>\r\n      </svg>\r\n      </Button>\r\n      </div>\r\n     \r\n      \r\n\r\n      \r\n     \r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App_2;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App_2 from './App_2';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App_2 />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles,colors } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"118px\",\r\n    // maxWidth:\"130px\",\r\n    outlineColor:\"#000000d1\",\r\n    boxShadow:\"-1px 3px 5px -3px\"\r\n    \r\n\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  filled:{\r\n    backgroundColor:\"#ffffffc9\",\r\n    \"&.Mui-focused\":{\r\n      backgroundColor:\"white\"\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function SimpleSelect(props) {\r\n  const classes = useStyles();\r\n \r\n\r\nuseEffect(()=>{\r\n  console.log(props);\r\n},[])\r\n  return (\r\n    \r\n      <FormControl variant=\"filled\"  className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-label\" style={{fontSize:\"0.8rem\"}}>{props.label}</InputLabel>\r\n        <Select\r\n          \r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={props.curr_value}\r\n          onChange={props.handelChangeFdata}\r\n          name={props.name}\r\n          label={props.label}\r\n          className={classes.filled}\r\n\r\n        >\r\n          <MenuItem value=\"\">\r\n            <em>None</em>\r\n          </MenuItem>\r\n          {props.op?props.op.map((v,idx)=>{\r\n            return <MenuItem key={v.val} value={v.val}>{v.inlineTxt}</MenuItem>\r\n          }):null}\r\n          \r\n          \r\n        </Select>\r\n      </FormControl>\r\n      \r\n      \r\n      \r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport PropTypes from 'prop-types';\r\nimport Input from '@material-ui/core/Input';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { yellow } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        minWidth: \"253px\",\r\n        maxWidth: \"253px\",\r\n        // height:\"70px\",\r\n        margin: theme.spacing(1),\r\n        borderTopRightRadius:3,\r\n        borderTopLeftRadius:3,\r\n\r\n        \r\n\r\n        // position:\"relative\",\r\n        // left:\"-100px\",\r\n        // top:\"8px\",\r\n        backgroundColor:\"#ffffffc9\",\r\n        boxShadow:\"-1px 3px 5px -3px\",\r\n\r\n\r\n\r\n        //   display:flex,\r\n\r\n    },\r\n    margin: {\r\n        height: theme.spacing(3),\r\n    },\r\n    input: {\r\n        width: 60,\r\n        height: \"1.00em\"\r\n    },\r\n    rlables: {\r\n        \r\n        fontSize: \"0.8rem\",\r\n        paddingLeft: \"4%\",\r\n        paddingTop: \"1.5%\",\r\n        color:\"#757575\",\r\n        // top: \"-25px\",\r\n        // left:\"80px\"\r\n    }\r\n}));\r\nfunction ValueLabelComponent(props) {\r\n    const { children, open, value } = props;\r\n\r\n    return (\r\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nValueLabelComponent.propTypes = {\r\n    children: PropTypes.element.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nexport default function RangeSlider(props) {\r\n\r\n    const classes = useStyles();\r\n    const [values, setValue] = React.useState(['5000', '100000']);\r\n\r\n    // const handleChange = (event, newValue) => {\r\n    //     setValue(newValue);\r\n    //     event.target['name'] = props.rname;\r\n    //     event.target['value'] = props.newValue;\r\n    //     props.handelChangeFdata(event);\r\n    // };\r\n    const handleInputChange = (event,inputname) => {\r\n        //setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n\r\n        let tempnum=0;\r\n        try {\r\n            if(!(/[\\d]*/.test(event.target.value))){\r\n                //return true if the value has any alpha char\r\n                return ; \r\n                \r\n            }\r\n            tempnum = Number(event.target.value);\r\n\r\n            }catch{\r\n                return;\r\n            }\r\n        // console.log(tempnum);\r\n        // console.log(inputname);\r\n        if (tempnum < 0) {\r\n            // console.log(\"to small\");\r\n            return;\r\n        }\r\n\r\n        if (tempnum > 1e8) {\r\n            // console.log(\"to big\");\r\n\r\n            return;\r\n        }\r\n\r\n        if (inputname== \"maxval\") {\r\n            // console.log(\"change max val\");\r\n            setValue([values[0], tempnum.toString()]);\r\n\r\n            event.target['name'] = props.rname;\r\n            event.target['value'] = [Number(values[0]), tempnum];\r\n            props.handelChangeFdata(event);\r\n        }\r\n        else if (inputname == \"minval\") {\r\n            setValue([tempnum.toString(), values[1]]);\r\n            event.target['name'] = props.rname;\r\n            event.target['value'] = [tempnum, Number(values[1])];\r\n            props.handelChangeFdata(event);\r\n\r\n        }\r\n\r\n\r\n    };\r\n    // const handleBlur = () => {\r\n    //     if (value[0] < 0) {\r\n    //         setValue([0,value[1]]);\r\n    //     } \r\n    //     if (value[1] <0) {\r\n    //         setValue([value[0],0]);\r\n    //     }\r\n    // };\r\n    useEffect(() => {\r\n\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Typography className={classes.rlables} id=\"range-slider\">\r\n                Price (<strong>BDT</strong>)\r\n            </Typography>\r\n            {/*\r\n      <Slider\r\n      ValueLabelComponent={ValueLabelComponent}\r\n        value={value}\r\n        onChange={handleChange}\r\n        valueLabelDisplay=\"auto\"\r\n        aria-labelledby=\"range-slider\"\r\n        setp={1000}\r\n        min={0}\r\n        max={50000}\r\n      /> */}\r\n\r\n            <div style={{\r\n                display: \"flex\",\r\n                // alignItems: \"baseline\",\r\n                justifyContent: \"space-around\",\r\n\r\n                // backgroundColor: yellow,\r\n                position: \"relative\",\r\n                // top:\"-28px\",\r\n                left: \"14px\",\r\n                top: \"7px\",\r\n            }}>\r\n                <Grid container spacing={1} alignItems=\"baseline\">\r\n                    <Grid item>\r\n                        <p style={{ fontSize: 12 }}>Min</p>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Input\r\n\r\n                            className={classes.input}\r\n                            value={values[0]}\r\n                            name=\"minval\"\r\n                            margin=\"dense\"\r\n                            onChange={(e)=>handleInputChange(e,\"minval\")}\r\n                        // onBlur={handleBlur}\r\n\r\n                        // inputProps={{\r\n                        //     step: 10,\r\n\r\n                        //     type: 'number',\r\n                        //     'aria-labelledby': 'input-slider',\r\n                        // }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                {/* <p style={{ fontSize: \"26\" }}>-</p> */}\r\n                <Grid container spacing={1} alignItems=\"baseline\">\r\n                    <Grid item>\r\n                        <p style={{ fontSize: 12 }}>Max</p>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Input\r\n\r\n                            className={classes.input}\r\n                            value={values[1]}\r\n                            name=\"maxval\"\r\n                            margin=\"dense\"\r\n\r\n                            onChange={(e)=>handleInputChange(e,\"maxval\")}\r\n                        // onBlur={handleBlur}\r\n                        // inputProps={{\r\n                        //     step: 10,\r\n                        //     type: 'number',\r\n                        //     'aria-labelledby': 'input-slider',\r\n                        // }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    \r\n    borderTopRightRadius:3,\r\n    borderTopLeftRadius:3,\r\n    margin: theme.spacing(1),\r\n    boxShadow:\"-1px 3px 5px -3px\",\r\n    // minWidth: 120,\r\n    minWidth: \"150px\",\r\n    // maxWidth: \"250px\",\r\n    backgroundColor:\"#ffffffc9\",\r\n    // marginTop:\"25px\",\r\n    \"& .MuiSelect-root\":{\r\n      margin:\"4px\",\r\n      \r\n    },\r\n    \"&.MuiInputBase-root.Mui-focused\":{\r\n      backgroundColor:\"white\"\r\n    },\r\n    \r\n   \r\n\r\n  },\r\n  colorPrimary:{\r\n    color: \"#ea4e2f\"\r\n  },\r\n}));\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\nexport default function MultipleSelect(props) {\r\n  const classes = useStyles();\r\n\r\n\r\n  \r\n  const handleChange = (event) => {\r\n    event.target[\"name\"]=props.name;\r\n\r\n    props.handelChangeFdata(event);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      \r\n      {/* <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-mutiple-name-label\">Name</InputLabel>\r\n        <Select\r\n          labelId=\"demo-mutiple-name-label\"\r\n          id=\"demo-mutiple-name\"\r\n          multiple\r\n          value={personName}\r\n          onChange={handleChange}\r\n          \r\n         \r\n          MenuProps={MenuProps}\r\n        >\r\n          {names.map((name) => (\r\n            <MenuItem key={name} value={name} >\r\n              {name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl> */}\r\n\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel style={{left:\"12px\",fontSize:\"0.8rem\"}} id=\"a-mutiple-checkbox-label\">{props.label?props.label:null}</InputLabel>\r\n        <Select\r\n         \r\n          labelId=\"a-mutiple-checkbox-label\"\r\n          id=\"a-mutiple-checkbox\"\r\n          multiple\r\n          value={props.selectedFeature}\r\n          onChange={handleChange}\r\n          input={<Input />}\r\n          renderValue={(selected) => selected.join(', ')}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {props.data.map((name) => (\r\n            <MenuItem key={name} value={name}>\r\n              <Checkbox  className={classes.colorPrimary} checked={props.selectedFeature.indexOf(name) > -1} />\r\n              <ListItemText primary={name} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      \r\n     \r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}